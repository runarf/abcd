{"version":3,"sources":["components/AbcdsTable.tsx","Types.tsx","components/AbcdForm.tsx","info/index.tsx","components/InfoSidebar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Steps","Td","styled","div","AbcdsTable","abcds","onRemove","length","css","map","abcd","index","key","activating","belief","consequences","dispute","type","onClick","MyTextInput","label","props","useField","name","field","meta","htmlFor","id","touched","error","AbcdForm","onSubmit","onClickTextInput","currentUser","initialValues","uuidv4","values","placeholder","Activating","Belief","Consequences","Dispute","info","title","description","example","InfoSidebar","currentStep","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","SignIn","onLogin","useState","isSignedIn","setIsSignedIn","uiConfig","autoUpgradeAnonymousUsers","signInOptions","provider","auth","EmailAuthProvider","PROVIDER_ID","signInMethod","EMAIL_LINK_SIGN_IN_METHOD","forceSameDevice","callbacks","signInSuccessWithAuthResult","authResult","console","log","signInFailure","a","code","cred","credential","signInWithCredential","useEffect","unregisterAuthObserver","onAuthStateChanged","user","firebaseAuth","email","signOut","App","setCurrentStep","setAbcds","setCurrentUser","Error","getPath","uid","listener","firestore","collection","onSnapshot","snapshot","docs","doc","data","handleOnRemove","db","where","get","abcdToDeleteRef","delete","handleOnSubmit","add","docRef","className","step","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33cecc3b.chunk.js","sourcesContent":["/** @jsx jsx */\nimport { FC, Fragment } from 'react';\nimport styled from '@emotion/styled';\nimport { jsx, css } from '@emotion/core';\nimport { Abcd } from '../Types';\n\nconst Td = styled.div`\n  border: 1px solid black;\n`;\n\nexport const AbcdsTable: FC<{\n  abcds: Abcd[];\n  onRemove: (abcd: Abcd) => void;\n}> = ({ abcds, onRemove }) => {\n  return abcds.length > 0 ? (\n    <div\n      css={css`\n        display: grid;\n        grid-template-columns: repeat(5, 1fr);\n      `}\n    >\n      <Td>Activating</Td>\n      <Td>Belief</Td>\n      <Td>Consequences</Td>\n      <Td>Dispute</Td>\n      <div></div>\n      {abcds.map((abcd: Abcd, index: number) => (\n        <Fragment key={index}>\n          <Td>{abcd.activating}</Td>\n          <Td>{abcd.belief}</Td>\n          <Td>{abcd.consequences}</Td>\n          <Td>{abcd.dispute}</Td>\n          <div>\n            <button\n              type=\"button\"\n              onClick={() => {\n                onRemove(abcd);\n              }}\n            >\n              Delete\n            </button>\n          </div>\n        </Fragment>\n      ))}\n    </div>\n  ) : null;\n};\n","export enum Steps {\n  Activating = 'activating',\n  Belief = 'belief',\n  Consequences = 'consequences',\n  Dispute = 'dispute'\n}\nexport interface Abcd {\n  id: string;\n  activating: string;\n  belief: string;\n  consequences: string;\n  dispute: string;\n}\n","/** @jsx jsx */\nimport { FC } from 'react';\nimport { Formik, Form, useField } from 'formik';\nimport { jsx, css } from '@emotion/core';\nimport uuidv4 from 'uuid/v4';\nimport { Steps, Abcd } from '../Types';\nimport { User } from 'firebase';\n\nconst MyTextInput: FC<{\n  label: string;\n  name: Steps;\n  onClick: () => void;\n  [otherProps: string]: any;\n}> = ({ label, ...props }) => {\n  const [field, meta] = useField(props.name);\n  return (\n    <div\n      css={css`\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n      `}\n    >\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <textarea\n        css={css`\n          height: 100px;\n        `}\n        {...field}\n        {...props}\n      />\n      {meta.touched && meta.error ? <div>{meta.error}</div> : null}\n    </div>\n  );\n};\n\nexport const AbcdForm: FC<{\n  onSubmit: (values: Abcd) => void;\n  onClickTextInput: (step: Steps) => void;\n  currentUser: User | null;\n}> = ({ onSubmit, onClickTextInput, currentUser }) => {\n  return (\n    <Formik\n      initialValues={{\n        id: uuidv4(),\n        activating: '',\n        belief: '',\n        consequences: '',\n        dispute: ''\n      }}\n      onSubmit={values => {\n        onSubmit(values);\n      }}\n    >\n      {() => (\n        <Form>\n          <div\n            css={css`\n              display: flex;\n              justify-content: space-around;\n            `}\n          >\n            <MyTextInput\n              placeholder=\"What happened?\"\n              onClick={() => {\n                onClickTextInput(Steps.Activating);\n              }}\n              label=\"Activating\"\n              name={Steps.Activating}\n              type=\"text\"\n            />\n            <MyTextInput\n              placeholder=\"What did you think?\"\n              onClick={() => {\n                onClickTextInput(Steps.Belief);\n              }}\n              label=\"Belief\"\n              name={Steps.Belief}\n              type=\"text\"\n            />\n            <MyTextInput\n              placeholder=\"What is the consequence of those thoughts?\"\n              onClick={() => {\n                onClickTextInput(Steps.Consequences);\n              }}\n              label=\"Consequences\"\n              name={Steps.Consequences}\n              type=\"text\"\n            />\n            <MyTextInput\n              placeholder=\"What other reasons could there be?\"\n              onClick={() => {\n                onClickTextInput(Steps.Dispute);\n              }}\n              label=\"Dispute\"\n              name={Steps.Dispute}\n              type=\"text\"\n            />\n          </div>\n\n          <div\n            css={css`\n              margin-top: 50px;\n              display: flex;\n              justify-content: center;\n            `}\n          >\n            {currentUser ? (\n              <button type=\"submit\">Submit</button>\n            ) : (\n              <div>Please sign in on the left to submit and save the data</div>\n            )}\n          </div>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","const info = {\n  activating: {\n    title: 'Activating Event.',\n    description:\n      'This refers to the initial situation or “trigger”. This is basically the situation at hand that triggered your mental though process.',\n    example:\n      'You’re strolling down the street and someone you know walks right by you without saying hello.'\n  },\n  belief: {\n    title: 'Belief System.',\n    description:\n      'Your interpretation of the situation, what you tell yourself about the event (your self talk) and your beliefs and expectations of others.',\n    example:\n      'You think to yourself, “What did I do? He/she must be upset with me or doesn’t like me anymore.”'\n  },\n\n  consequences: {\n    title: 'Consequences.',\n    description:\n      'How you feel and what you do in response to your belief system (the emotional and behavioral consequences).',\n    example:\n      'You start to worry and feel bad about yourself, then you get a little angry and decide to give this person the cold shoulder next time you see them.'\n  },\n  dispute: {\n    title: 'Dispute.',\n    description:\n      'Examine your beliefs and expectations. Are they unrealistic or irrational? If so, what may be an alternative, more rational appraisal of the situation? A more realistic interpretation is likely to lead to different, healthier emotional and behavioral consequences.',\n    example:\n      '…then you catch yourself and say, “Wait, he/she probably didn’t see me; perhaps he/she was distracted by something difficult that happened earlier that day.”'\n  }\n};\nexport default info;\n","/** @jsx jsx */\nimport { FC } from 'react';\nimport { jsx, css } from '@emotion/core';\nimport info from '../info';\nimport { Steps } from '../Types';\nexport const InfoSidebar: FC<{\n  currentStep: Steps | null;\n}> = ({ currentStep }) => {\n  return currentStep ? (\n    <div\n      css={css`\n        margin: 10px;\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        align-content: center;\n      `}\n    >\n      <h1>{info[currentStep].title}</h1>\n      <p>{info[currentStep].description}</p>\n      <p>{info[currentStep].example}</p>\n    </div>\n  ) : null;\n};\n","/** @jsx jsx */\nimport { FC, useState, useEffect } from 'react';\nimport { jsx, css } from '@emotion/core';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport firebase, { User } from 'firebase/app';\nimport StyledFirebaseAuth from 'react-firebaseui/FirebaseAuth';\nimport { AbcdsTable } from './components/AbcdsTable';\nimport { AbcdForm } from './components/AbcdForm';\nimport { InfoSidebar } from './components/InfoSidebar';\nimport { Steps, Abcd } from './Types';\n\n//import './App.css';\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyCGq1TMToYxJ7M9xTjiZtv4qzv-bxXidRk',\n  authDomain: 'abcd-629a4.firebaseapp.com',\n  databaseURL: 'https://abcd-629a4.firebaseio.com',\n  projectId: 'abcd-629a4',\n  storageBucket: 'abcd-629a4.appspot.com',\n  messagingSenderId: '650304935508',\n  appId: '1:650304935508:web:8dc9ad5d0320cb44e5bfc1',\n  measurementId: 'G-ZVYBVPDPK5',\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nconst SignIn: FC<{ onLogin: (user: User) => void }> = ({ onLogin }) => {\n  const [isSignedIn, setIsSignedIn] = useState<boolean>(false);\n\n  const uiConfig: firebaseui.auth.Config = {\n    autoUpgradeAnonymousUsers: true,\n    signInOptions: [\n      {\n        provider: firebase.auth.EmailAuthProvider.PROVIDER_ID,\n        // Use email link authentication and do not require password.\n        // Note this setting affects new users only.\n        // For pre-existing users, they will still be prompted to provide their\n        // passwords on sign-in.\n        signInMethod: firebase.auth.EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD,\n        // Allow the user the ability to complete sign-in cross device, including\n        // the mobile apps specified in the ActionCodeSettings object below.\n        forceSameDevice: true,\n      },\n    ],\n    callbacks: {\n      signInSuccessWithAuthResult: (authResult) => {\n        console.log('signed in', authResult);\n        return false;\n      },\n      signInFailure: async (error) => {\n        if (error.code !== 'firebaseui/anonymous-upgrade-merge-conflict') {\n          return;\n        }\n        var cred = error.credential;\n\n        firebase.auth().signInWithCredential(cred);\n      },\n    },\n  };\n\n  useEffect(() => {\n    const unregisterAuthObserver = firebase\n      .auth()\n      .onAuthStateChanged((user) => {\n        console.log('user signed in', user, firebase.auth().currentUser);\n        setIsSignedIn(!!user);\n\n        if (user !== null) {\n          onLogin(user);\n        }\n      });\n    return () => unregisterAuthObserver();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div>\n      {!isSignedIn && (\n        <StyledFirebaseAuth\n          uiConfig={uiConfig}\n          firebaseAuth={firebase.auth()}\n        />\n      )}\n      {isSignedIn && (\n        <div>\n          <p>Welcome {firebase.auth().currentUser!.email}</p>\n          <button onClick={() => firebase.auth().signOut()}>Sign out</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst App = () => {\n  const [currentStep, setCurrentStep] = useState<Steps | null>(null);\n  const [abcds, setAbcds] = useState<Abcd[]>([]);\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n\n  if (!firebase) {\n    throw Error('no firebase in app');\n  }\n\n  const getPath = () => {\n    if (!currentUser) throw Error('No current user');\n    return `users/${currentUser.uid}/abcds`;\n  };\n\n  useEffect(() => {\n    if (!currentUser) return;\n    const db = firebase.firestore();\n\n    const listener = db.collection(getPath()).onSnapshot((snapshot) => {\n      const docs = snapshot.docs;\n      const abcds: Abcd[] = docs.map((doc) => doc.data() as Abcd);\n      setAbcds(abcds);\n    });\n\n    return () => listener();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentUser]);\n\n  const handleOnRemove = async (abcd: Abcd) => {\n    const db = firebase.firestore();\n\n    try {\n      const snapshot = await db\n        .collection(getPath())\n        .where('id', '==', abcd.id)\n        .get();\n      console.log(snapshot.docs);\n      const abcdToDeleteRef = snapshot.docs[0];\n      await db.collection(getPath()).doc(abcdToDeleteRef.id).delete();\n    } catch (error) {\n      console.log('delete error', error);\n    }\n  };\n\n  const handleOnSubmit = async (abcd: Abcd) => {\n    if (!currentUser) throw Error(\"Can't add abcd\");\n\n    try {\n      const db = firebase.firestore();\n      const docRef = await db.collection(getPath()).add(abcd);\n      console.log('Document written with ID: ', docRef.id);\n    } catch (error) {\n      console.error('Error adding document: ', error);\n    }\n  };\n\n  return (\n    <div\n      css={css`\n        height: 100vh;\n        display: grid;\n        grid-template-columns: 1fr 2fr 1fr;\n        grid-template-rows: 1fr 2fr 1fr;\n        grid-template-areas:\n          'header header header'\n          'leftSidebar form sidebar'\n          'leftSidebar table sidebar';\n      `}\n      className=\"App\"\n    >\n      <div\n        css={css`\n          grid-area: header;\n          display: flex;\n          justify-content: center;\n          background-color: #e85a4f;\n        `}\n      >\n        <h1>ABCD</h1>\n      </div>\n      <div\n        css={css`\n          grid-area: leftSidebar;\n          background-color: pink;\n        `}\n      >\n        <SignIn onLogin={(user) => setCurrentUser(user)} />\n      </div>\n      <div\n        css={css`\n          width: 100%;\n          grid-area: form;\n          display: grid;\n          background-color: #eae7dc;\n        `}\n      >\n        <AbcdForm\n          onSubmit={handleOnSubmit}\n          onClickTextInput={(step) => {\n            setCurrentStep(step);\n          }}\n          currentUser={currentUser}\n        />\n      </div>\n      <div\n        css={css`\n          grid-area: table;\n          width: 100%;\n          background-color: #d8c3a5;\n        `}\n      >\n        {currentUser ? (\n          <AbcdsTable onRemove={handleOnRemove} abcds={abcds} />\n        ) : null}\n      </div>\n      <div\n        css={css`\n          grid-area: sidebar;\n          background-color: #8e8d8a;\n        `}\n      >\n        <InfoSidebar currentStep={currentStep} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}